import logging
import random

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, ConversationHandler, MessageHandler, Filters
candies = 50
step = 15

reply_keyboard = [['/play', '/rules'], # –∑–∞–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫, —Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
                  ['/setting','/close' ]]


markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False) # –ø–µ—Ä–µ–¥–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥,
# one_time_keyboard=False —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª–∞—Å—å

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)

TOKEN = '5938698218:AAE8PUol2UNv_vtXR8W9_8fduIky8vIA94s'


def start(update, context):
    name = f'{update.message.from_user.first_name} {update.message.from_user.last_name}' #–≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º
    update.message.reply_text(
        f"{name},–¥–∞–≤–∞–π —Å—ã–≥—Ä–∞–µ–º. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ",
        reply_markup = markup #–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

def close_keyboard(update, context):
    update.message.reply_text(
        "Ok",
        reply_markup = ReplyKeyboardRemove() # —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—É—Ç—Ä—É
    )

def rules(update, context):
    update.message.reply_text(
        f"–ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –Ω–µ –±–æ–ª—å—à–µ {step}, –∫—Ç–æ –≤–æ–∑—å–º–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ç—ã, —Ç–æ—Ç –≤—ã–∏–≥—Ä–∞–ª")


def setting(update, context):
    update.message.reply_text(
        "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ–º—ã—Ö –∫–æ–Ω—Ñ–µ—Ç. –ò –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥")
    return 1


def set_setting(update, context):
    global candies # —Å–¥–µ–ª–∞–µ–º –∏—Ö global, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥–ª–∏ –∏—Ö –≤–∏–¥–µ—Ç—å
    global step
    candies, step = map(int,update.message.text.split()) #—Å–¥–µ–ª–∞–ª–∏ int
    update.message.reply_text(
        '–ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
    return ConversationHandler.END #–≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞

def play(update, context):
    update.message.reply_text(
        f"–í–∞—à —Ö–æ–¥. –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–µ—Ç –≤—ã –±–µ—Ä–µ—Ç–µ. –î–æ—Å—Ç—É–ø–Ω–æ {candies} –∫–æ–Ω—Ñ–µ—Ç. "
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {step}")#reply_markup=ReplyKeyboardRemove()) # —É–±—Ä–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—É—Ç—Ä—É
    return 1


def stop(update, context):
    update.message.reply_text("–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!")
    return ConversationHandler.END


def play_step(update, context):
    global candies # —Ç.–∫. –Ω–∏–∂–µ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é candies, –º—ã –µ–µ –∑–¥–µ—Å—å –æ–±—ä—è–≤–ª—è–µ–º
    candy = int(update.message.text)
    if candy > step:
        update.message.reply_text(f'–í—ã –≤–∑—è–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ ‚õî, –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –¥–æ {step} –∫–æ–Ω—Ñ–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return play_step()
    else:
        candies -= candy
    if candies <= step:
        update.message.reply_text('–Ø –∑–∞–±–∏—Ä–∞—é, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–æ–Ω—Ñ–µ—Ç—ã, –Ø –ø–æ–±–µ–¥–∏–ª! üéâ')
        reply_markup = markup #–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
        return ConversationHandler.END
    else:
        n =  candies % (step+1)
        if 0 < n <= step:
            update.message.reply_text(
            f" –ú–æ–π —Ö–æ–¥. –¥–æ—Å—Ç—É–ø–Ω–æ {candies} –∫–æ–Ω—Ñ–µ—Ç. –Ø –±–µ—Ä—É {n} –∫–æ–Ω—Ñ–µ—Ç."
            f" –¢–µ–ø–µ—Ä—å {candies-n} –∫–æ–Ω—Ñ–µ—Ç, –≤—ã—à —Ö–æ–¥")
        else:
            n = random.randint(1,step)
            update.message.reply_text(
                f" –ú–æ–π —Ö–æ–¥. –î–æ—Å—Ç—É–ø–Ω–æ {candies} –∫–æ–Ω—Ñ–µ—Ç. –Ø –±–µ—Ä—É {n} –∫–æ–Ω—Ñ–µ—Ç."
                f" –¢–µ–ø–µ—Ä—å {candies - n} –∫–æ–Ω—Ñ–µ—Ç, –≤—ã—à —Ö–æ–¥")

    candies -= candies % (step+1)
    if candies <= step:
        update.message.reply_text('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã –ø–æ–±–µ–¥–∏–ª!')
        reply_markup = markup #–ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
        return ConversationHandler.END

def main():
    updater = Updater(TOKEN)
    dp = updater.dispatcher
    setting_handler = ConversationHandler(
        entry_points = [CommandHandler('setting', setting)],
        states = {
            1:[MessageHandler(Filters.text & ~Filters.command, set_setting)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    play_handler = ConversationHandler(
        entry_points = [CommandHandler('play', play)],
        states = {
            1:[MessageHandler(Filters.text & ~Filters.command, play_step)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("rules", rules))
    dp.add_handler(setting_handler)
    dp.add_handler(play_handler)
    dp.add_handler(CommandHandler("close", close_keyboard))


    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()